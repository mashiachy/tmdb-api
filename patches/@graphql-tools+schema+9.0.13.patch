diff --git a/node_modules/@graphql-tools/schema/cjs/addResolversToSchema.js b/node_modules/@graphql-tools/schema/cjs/addResolversToSchema.js
index 7b0f8d5..d71c54d 100644
--- a/node_modules/@graphql-tools/schema/cjs/addResolversToSchema.js
+++ b/node_modules/@graphql-tools/schema/cjs/addResolversToSchema.js
@@ -12,8 +12,8 @@ function addResolversToSchema({ schema, resolvers: inputResolvers, defaultFieldR
         : inputResolvers;
     for (const typeName in resolvers) {
         const resolverValue = resolvers[typeName];
-        const resolverType = typeof resolverValue;
-        if (resolverType !== 'object') {
+        const resolverInstanceOfObject = resolverValue instanceof Object;
+        if (!resolverInstanceOfObject) {
             throw new Error(`"${typeName}" defined in resolvers, but has invalid value "${resolverValue}". The resolver's value must be of type object.`);
         }
         const type = schema.getType(typeName);
diff --git a/node_modules/@graphql-tools/schema/esm/addResolversToSchema.js b/node_modules/@graphql-tools/schema/esm/addResolversToSchema.js
index 1a5f36e..2389872 100644
--- a/node_modules/@graphql-tools/schema/esm/addResolversToSchema.js
+++ b/node_modules/@graphql-tools/schema/esm/addResolversToSchema.js
@@ -9,8 +9,8 @@ export function addResolversToSchema({ schema, resolvers: inputResolvers, defaul
         : inputResolvers;
     for (const typeName in resolvers) {
         const resolverValue = resolvers[typeName];
-        const resolverType = typeof resolverValue;
-        if (resolverType !== 'object') {
+        const resolverInstanceOfObject = resolverValue instanceof Object;
+        if (!resolverInstanceOfObject) {
             throw new Error(`"${typeName}" defined in resolvers, but has invalid value "${resolverValue}". The resolver's value must be of type object.`);
         }
         const type = schema.getType(typeName);
